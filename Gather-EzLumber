# Very basic walking around lumbering script
# set the serial and your weight amount in the required adjustments below - go stand in some trees and hit "play macro"
# uses pathfinding on regular client, cant seem to make it work in CUO, but good enough for semi unattended.
# requires you to manually store the logs when you are overweight

## next version will include recalling to various locations collecting the logs/boards and coming back to bank em, then setting off again etc..

# Required Adjustments
AxeSerial = 0x4012E722  # Set Serial Of Axe That You Have Equipped
SawSerial = 0x4012E72B # Set Serial Of saw That You Have in backpack
CarpToolUseAtWeight = 300 # Set the Character Weight to turn logs into boards at

# Optional Parameters
ScanRange = 15
TreeStaticID = [3221, 3222, 3225, 3227, 3228, 3229, 3210, 3238, 3240, 3242, 3243, 3267, 3268, 3272, 3273, 3274, 3275, 3276, 3277, 3280, 3283, 3286, 3288, 3290, 3293, 3296, 3299, 3302, 3320, 3323, 3326, 3329, 3365, 3367, 3381, 3383, 3384, 3394, 3395, 3417, 3440, 3461, 3476, 3478, 3480, 3482, 3484, 3486, 3488, 3490, 3492, 3496]
CarpTools = [0x10E7, 0x1032, 0x10E6, 0x10E4, 0x10E5, 0x1028, 0x1030, 0x1034] 
TimeoutOnWaitAction = 4000
ChopDelay = 1000
LogID = 0x1BDD



# Main
from System.Collections.Generic import List
tileinfo = List[Statics.TileInfo]
treeposx = []
treeposy = []
treeposz = []
treegfx = []
treenumber = 0
blockcount = 0
onloop = True

def EquipAxe():
    for potentialHatchet in Player.Backpack.Contains:
        if potentialHatchet.ItemID == 0x0F43:
            Player.EquipItem(potentialHatchet)
            Misc.Pause(1000)
            break                       #Only equip the first hatchet

def RangeTree(locationNumber):
    if (Player.Position.X - 1) == treeposx[locationNumber] and (Player.Position.Y + 1) == treeposy[locationNumber]:
        return True
    elif (Player.Position.X - 1) == treeposx[locationNumber] and (Player.Position.Y - 1) == treeposy[locationNumber]:
        return True
    elif (Player.Position.X + 1) == treeposx[locationNumber] and (Player.Position.Y + 1) == treeposy[locationNumber]:
        return True
    elif (Player.Position.X + 1) == treeposx[locationNumber] and (Player.Position.Y - 1) == treeposy[locationNumber]:
        return True
    elif Player.Position.X == treeposx[locationNumber] and (Player.Position.Y - 1) == treeposy[locationNumber]:
        return True    
    elif Player.Position.X == treeposx[locationNumber] and (Player.Position.Y + 1) == treeposy[locationNumber]:   
        return True     
    elif Player.Position.Y == treeposy[locationNumber] and (Player.Position.X - 1) == treeposx[locationNumber]:
        return True    
    elif Player.Position.Y == treeposy[locationNumber] and (Player.Position.X + 1) == treeposx[locationNumber]:   
        return True    
    else:
        return False
    
def ScanStatic(): 
    global treenumber
    Misc.SendMessage("Scanning For Trees..", 77)
    minx = Player.Position.X - ScanRange
    maxx = Player.Position.X + ScanRange
    miny = Player.Position.Y - ScanRange
    maxy = Player.Position.Y + ScanRange

    while miny <= maxy:
        while minx <= maxx:
            tileinfo = Statics.GetStaticsTileInfo(minx, miny, Player.Map)
            if tileinfo.Count > 0:
                for tile in tileinfo:
                    for staticid in TreeStaticID:
                        if staticid == tile.StaticID:
                            #Misc.SendMessage('Tree Located Here: %i - Y: %i - Z: %i' % (minx, miny, tile.StaticZ), 66)
                            treeposx.Add(minx)
                            treeposy.Add(miny)
                            treeposz.Add(tile.StaticZ)
                            treegfx.Add(tile.StaticID)
            else:
                Misc.NoOperation()
            minx = minx + 1
        minx = Player.Position.X - ScanRange            
        miny = miny + 1
    treenumber = treeposx.Count    
    Misc.SendMessage('Total Trees Detected: %i' % (treenumber), 77)
    
def MoveToTree(locationNumber):
    pathlock = 0
    Misc.SendMessage('Moving to Tree: %i' % (locationNumber), 77)
    Player.PathFindTo(treeposx[locationNumber], treeposy[locationNumber], treeposz[locationNumber])
    while not RangeTree(locationNumber):
        Misc.Pause(100)
        pathlock = pathlock + 1
        if pathlock > 350:
            Player.PathFindTo(treeposx[locationNumber], treeposy[locationNumber], treeposz[locationNumber])  
            pathlock = 0
        else:
            Misc.NoOperation()
        
    Misc.SendMessage('Tree Number: %i' % (locationNumber), 77)


    
def CutTree(locationNumber):
    global blockcount
    if Target.HasTarget():
        Misc.SendMessage("Possible blockage..", 77)
        Target.Cancel()
        Misc.Pause(500)
    else:
        Misc.NoOperation()  
        
    if (Player.Weight >= CarpToolUseAtWeight):
        Items.UseItem(SawSerial)
        Gumps.WaitForGump(1891859459, 10000)
        Misc.Pause(2000)
        Gumps.SendAction(1891859459, 21)
        
        

    else:
        Misc.NoOperation()
        
    
    Journal.Clear()
    #original code
    axe = Items.FindBySerial(AxeSerial)
    Items.UseItem(axe)
    
    #try and grab an any hatchet
    #EquipAxe()
    #axe = Items.FindBySerial(potentialHatchet)
    #Items.UseItem(axe)
    #
    
    Target.WaitForTarget(TimeoutOnWaitAction)
    Target.TargetExecute(treeposx[locationNumber], treeposy[locationNumber], treeposz[locationNumber], treegfx[locationNumber])
    Misc.Pause(ChopDelay)
    if Journal.Search("There's not enough"):
        Misc.SendMessage("Changing Tree..", 77)
    elif Journal.Search("That is too far away"):
        blockcount = blockcount + 1
        Journal.Clear()
        if (blockcount > 15):
            blockcount = 0
            Misc.SendMessage("Changing Tree, Possible blockage..", 77)
        else:
            CutTree(locationNumber)
    else:
        CutTree(locationNumber)
            
while onloop:
    
    ScanStatic()
    i = 0
    while i < treenumber:
        MoveToTree(i)
        CutTree(i)
        i = i + 1
    treeposx = []
    treeposy = []
    treeposz = []
    treegfx = []
    treenumber = 0
    
    
